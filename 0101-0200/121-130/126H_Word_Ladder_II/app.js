// 126. Word Ladder II
// https://leetcode.com/problems/word-ladder-ii/
// T.C.: O(n^2 * m)
// S.C.: O(n)
/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {string[][]}
 */
var findLadders = function (beginWord, endWord, wordList) {
  const wordSet = new Set(wordList);
  if (!wordSet.has(endWord)) return [];
  wordSet.delete(beginWord);

  const queue = [beginWord];
  const nodes = [];
  let reached = false;

  while (queue.length && !reached) {
    nodes.push(queue.slice());
    let size = queue.length;

    for (let i = 0; i < size && !reached; i++) {
      let from = queue.shift();

      for (const toWord of wordSet) {
        if (!connected(from, toWord)) continue;

        if (toWord === endWord) {
          reached = true;
          break;
        }

        queue.push(toWord);
        wordSet.delete(toWord);
      }
    }
  }

  if (!reached) return [];

  const result = [[endWord]];
  for (let level = nodes.length - 1; level >= 0; level--) {
    let size = result.length;
    for (let a = 0; a < size; a++) {
      const p = result.shift();
      const last = p[0];
      for (const word of nodes[level]) {
        if (!connected(last, word)) continue;
        result.push([word, ...p]);
      }
    }
  }

  return result;

  function connected(a, b) {
    let c = 0;
    for (let i = 0; i < a.length && c < 2; i++) {
      if (a[i] !== b[i]) c++;
    }
    return c === 1;
  }
};

var beginWord = 'hit',
  endWord = 'cog',
  wordList = ['hot', 'dot', 'dog', 'lot', 'log', 'cog'];
var expected = [
  ['hit', 'hot', 'dot', 'dog', 'cog'],
  ['hit', 'hot', 'lot', 'log', 'cog'],
];
var result = findLadders(beginWord, endWord, wordList);
console.log(result, result.join() === expected.join());

var beginWord = 'hit',
  endWord = 'cog',
  wordList = ['hot', 'dot', 'dog', 'lot', 'log'];
var expected = [];
var result = findLadders(beginWord, endWord, wordList);
console.log(result, result.join() === expected.join());

var beginWord = '',
  endWord = '',
  wordList = [
    'aaaaa',
    'caaaa',
    'cbaaa',
    'daaaa',
    'dbaaa',
    'eaaaa',
    'ebaaa',
    'faaaa',
    'fbaaa',
    'gaaaa',
    'gbaaa',
    'haaaa',
    'hbaaa',
    'iaaaa',
    'ibaaa',
    'jaaaa',
    'jbaaa',
    'kaaaa',
    'kbaaa',
    'laaaa',
    'lbaaa',
    'maaaa',
    'mbaaa',
    'naaaa',
    'nbaaa',
    'oaaaa',
    'obaaa',
    'paaaa',
    'pbaaa',
    'bbaaa',
    'bbcaa',
    'bbcba',
    'bbdaa',
    'bbdba',
    'bbeaa',
    'bbeba',
    'bbfaa',
    'bbfba',
    'bbgaa',
    'bbgba',
    'bbhaa',
    'bbhba',
    'bbiaa',
    'bbiba',
    'bbjaa',
    'bbjba',
    'bbkaa',
    'bbkba',
    'bblaa',
    'bblba',
    'bbmaa',
    'bbmba',
    'bbnaa',
    'bbnba',
    'bboaa',
    'bboba',
    'bbpaa',
    'bbpba',
    'bbbba',
    'abbba',
    'acbba',
    'dbbba',
    'dcbba',
    'ebbba',
    'ecbba',
    'fbbba',
    'fcbba',
    'gbbba',
    'gcbba',
    'hbbba',
    'hcbba',
    'ibbba',
    'icbba',
    'jbbba',
    'jcbba',
    'kbbba',
    'kcbba',
    'lbbba',
    'lcbba',
    'mbbba',
    'mcbba',
    'nbbba',
    'ncbba',
    'obbba',
    'ocbba',
    'pbbba',
    'pcbba',
    'ccbba',
    'ccaba',
    'ccaca',
    'ccdba',
    'ccdca',
    'cceba',
    'cceca',
    'ccfba',
    'ccfca',
    'ccgba',
    'ccgca',
    'cchba',
    'cchca',
    'cciba',
    'ccica',
    'ccjba',
    'ccjca',
    'cckba',
    'cckca',
    'cclba',
    'cclca',
    'ccmba',
    'ccmca',
    'ccnba',
    'ccnca',
    'ccoba',
    'ccoca',
    'ccpba',
    'ccpca',
    'cccca',
    'accca',
    'adcca',
    'bccca',
    'bdcca',
    'eccca',
    'edcca',
    'fccca',
    'fdcca',
    'gccca',
    'gdcca',
    'hccca',
    'hdcca',
    'iccca',
    'idcca',
    'jccca',
    'jdcca',
    'kccca',
    'kdcca',
    'lccca',
    'ldcca',
    'mccca',
    'mdcca',
    'nccca',
    'ndcca',
    'occca',
    'odcca',
    'pccca',
    'pdcca',
    'ddcca',
    'ddaca',
    'ddada',
    'ddbca',
    'ddbda',
    'ddeca',
    'ddeda',
    'ddfca',
    'ddfda',
    'ddgca',
    'ddgda',
    'ddhca',
    'ddhda',
    'ddica',
    'ddida',
    'ddjca',
    'ddjda',
    'ddkca',
    'ddkda',
    'ddlca',
    'ddlda',
    'ddmca',
    'ddmda',
    'ddnca',
    'ddnda',
    'ddoca',
    'ddoda',
    'ddpca',
    'ddpda',
    'dddda',
    'addda',
    'aedda',
    'bddda',
    'bedda',
    'cddda',
    'cedda',
    'fddda',
    'fedda',
    'gddda',
    'gedda',
    'hddda',
    'hedda',
    'iddda',
    'iedda',
    'jddda',
    'jedda',
    'kddda',
    'kedda',
    'lddda',
    'ledda',
    'mddda',
    'medda',
    'nddda',
    'nedda',
    'oddda',
    'oedda',
    'pddda',
    'pedda',
    'eedda',
    'eeada',
    'eeaea',
    'eebda',
    'eebea',
    'eecda',
    'eecea',
    'eefda',
    'eefea',
    'eegda',
    'eegea',
    'eehda',
    'eehea',
    'eeida',
    'eeiea',
    'eejda',
    'eejea',
    'eekda',
    'eekea',
    'eelda',
    'eelea',
    'eemda',
    'eemea',
    'eenda',
    'eenea',
    'eeoda',
    'eeoea',
    'eepda',
    'eepea',
    'eeeea',
    'ggggg',
    'agggg',
    'ahggg',
    'bgggg',
    'bhggg',
    'cgggg',
    'chggg',
    'dgggg',
    'dhggg',
    'egggg',
    'ehggg',
    'fgggg',
    'fhggg',
    'igggg',
    'ihggg',
    'jgggg',
    'jhggg',
    'kgggg',
    'khggg',
    'lgggg',
    'lhggg',
    'mgggg',
    'mhggg',
    'ngggg',
    'nhggg',
    'ogggg',
    'ohggg',
    'pgggg',
    'phggg',
    'hhggg',
    'hhagg',
    'hhahg',
    'hhbgg',
    'hhbhg',
    'hhcgg',
    'hhchg',
    'hhdgg',
    'hhdhg',
    'hhegg',
    'hhehg',
    'hhfgg',
    'hhfhg',
    'hhigg',
    'hhihg',
    'hhjgg',
    'hhjhg',
    'hhkgg',
    'hhkhg',
    'hhlgg',
    'hhlhg',
    'hhmgg',
    'hhmhg',
    'hhngg',
    'hhnhg',
    'hhogg',
    'hhohg',
    'hhpgg',
    'hhphg',
    'hhhhg',
    'ahhhg',
    'aihhg',
    'bhhhg',
    'bihhg',
    'chhhg',
    'cihhg',
    'dhhhg',
    'dihhg',
    'ehhhg',
    'eihhg',
    'fhhhg',
    'fihhg',
    'ghhhg',
    'gihhg',
    'jhhhg',
    'jihhg',
    'khhhg',
    'kihhg',
    'lhhhg',
    'lihhg',
    'mhhhg',
    'mihhg',
    'nhhhg',
    'nihhg',
    'ohhhg',
    'oihhg',
    'phhhg',
    'pihhg',
    'iihhg',
    'iiahg',
    'iiaig',
    'iibhg',
    'iibig',
    'iichg',
    'iicig',
    'iidhg',
    'iidig',
    'iiehg',
    'iieig',
    'iifhg',
    'iifig',
    'iighg',
    'iigig',
    'iijhg',
    'iijig',
    'iikhg',
    'iikig',
    'iilhg',
    'iilig',
    'iimhg',
    'iimig',
    'iinhg',
    'iinig',
    'iiohg',
    'iioig',
    'iiphg',
    'iipig',
    'iiiig',
    'aiiig',
    'ajiig',
    'biiig',
    'bjiig',
    'ciiig',
    'cjiig',
    'diiig',
    'djiig',
    'eiiig',
    'ejiig',
    'fiiig',
    'fjiig',
    'giiig',
    'gjiig',
    'hiiig',
    'hjiig',
    'kiiig',
    'kjiig',
    'liiig',
    'ljiig',
    'miiig',
    'mjiig',
    'niiig',
    'njiig',
    'oiiig',
    'ojiig',
    'piiig',
    'pjiig',
    'jjiig',
    'jjaig',
    'jjajg',
    'jjbig',
    'jjbjg',
    'jjcig',
    'jjcjg',
    'jjdig',
    'jjdjg',
    'jjeig',
    'jjejg',
    'jjfig',
    'jjfjg',
    'jjgig',
    'jjgjg',
    'jjhig',
    'jjhjg',
    'jjkig',
    'jjkjg',
    'jjlig',
    'jjljg',
    'jjmig',
    'jjmjg',
    'jjnig',
    'jjnjg',
    'jjoig',
    'jjojg',
    'jjpig',
    'jjpjg',
    'jjjjg',
    'ajjjg',
    'akjjg',
    'bjjjg',
    'bkjjg',
    'cjjjg',
    'ckjjg',
    'djjjg',
    'dkjjg',
    'ejjjg',
    'ekjjg',
    'fjjjg',
    'fkjjg',
    'gjjjg',
    'gkjjg',
    'hjjjg',
    'hkjjg',
    'ijjjg',
    'ikjjg',
    'ljjjg',
    'lkjjg',
    'mjjjg',
    'mkjjg',
    'njjjg',
    'nkjjg',
    'ojjjg',
    'okjjg',
    'pjjjg',
    'pkjjg',
    'kkjjg',
    'kkajg',
    'kkakg',
    'kkbjg',
    'kkbkg',
    'kkcjg',
    'kkckg',
    'kkdjg',
    'kkdkg',
    'kkejg',
    'kkekg',
    'kkfjg',
    'kkfkg',
    'kkgjg',
    'kkgkg',
    'kkhjg',
    'kkhkg',
    'kkijg',
    'kkikg',
    'kkljg',
    'kklkg',
    'kkmjg',
    'kkmkg',
    'kknjg',
    'kknkg',
    'kkojg',
    'kkokg',
    'kkpjg',
    'kkpkg',
    'kkkkg',
    'ggggx',
    'gggxx',
    'ggxxx',
    'gxxxx',
    'xxxxx',
    'xxxxy',
    'xxxyy',
    'xxyyy',
    'xyyyy',
    'yyyyy',
    'yyyyw',
    'yyyww',
    'yywww',
    'ywwww',
    'wwwww',
    'wwvww',
    'wvvww',
    'vvvww',
    'vvvwz',
    'avvwz',
    'aavwz',
    'aaawz',
    'aaaaz',
  ];
var expected = [];
var result = findLadders(beginWord, endWord, wordList);
console.log(result, result.join() === expected.join());
